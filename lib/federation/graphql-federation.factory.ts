import { IResolvers } from '@graphql-tools/utils';
import { Injectable } from '@nestjs/common';
import { loadPackage } from '@nestjs/common/utils/load-package.util';
import { transformSchema } from 'apollo-graphql';
import { isString } from '@nestjs/common/utils/shared.utils';
import { gql } from 'apollo-server-core';
import {
  GraphQLAbstractType,
  GraphQLField,
  GraphQLInputObjectType,
  GraphQLObjectType,
  GraphQLResolveInfo,
  GraphQLSchema,
  GraphQLUnionType,
  isEnumType,
  isInputObjectType,
  isInterfaceType,
  isObjectType,
  isUnionType,
} from 'graphql';
import { mergeSchemas } from 'graphql-tools';
import { forEach, isEmpty } from 'lodash';
import { GraphQLSchemaBuilder } from '../graphql-schema.builder';
import { GqlModuleOptions } from '../interfaces';
import {
  PluginsExplorerService,
  ResolversExplorerService,
  ScalarsExplorerService,
} from '../services';
import { extend } from '../utils';

@Injectable()
export class GraphQLFederationFactory {
  constructor(
    private readonly resolversExplorerService: ResolversExplorerService,
    private readonly scalarsExplorerService: ScalarsExplorerService,
    private readonly pluginsExplorerService: PluginsExplorerService,
    private readonly gqlSchemaBuilder: GraphQLSchemaBuilder,
  ) {}

  async mergeOptions(
    options: GqlModuleOptions = {},
  ): Promise<GqlModuleOptions> {
    const transformSchema = async (schema) =>
      options.transformSchema ? options.transformSchema(schema) : schema;

    options.plugins = extend(
      options.plugins || [],
      this.pluginsExplorerService.explore(),
    );

    let schema: GraphQLSchema;
    if (options.autoSchemaFile) {
      schema = await this.generateSchema(options);
    } else if (isEmpty(options.typeDefs)) {
      schema = options.schema;
    } else {
      schema = this.buildSchemaFromTypeDefs(options);
    }

    return {
      ...options,
      schema: await transformSchema(schema),
      typeDefs: undefined,
    };
  }

  private buildSchemaFromTypeDefs(options: GqlModuleOptions) {
    const { buildFederatedSchema } = loadPackage(
      '@apollo/federation',
      'ApolloFederation',
      () => require('@apollo/federation'),
    );

    return buildFederatedSchema([
      {
        typeDefs: gql`
          ${options.typeDefs}
        `,
        resolvers: this.getResolvers(options.resolvers),
      },
    ]);
  }

  private async generateSchema(
    options: GqlModuleOptions,
  ): Promise<GraphQLSchema> {
    const {
      buildFederatedSchema,
      printSchema,
    } = loadPackage('@apollo/federation', 'ApolloFederation', () =>
      require('@apollo/federation'),
    );

    const autoGeneratedSchema: GraphQLSchema = await this.gqlSchemaBuilder.buildFederatedSchema(
      options.autoSchemaFile,
      options,
      this.resolversExplorerService.getAllCtors(),
    );
    let executableSchema: GraphQLSchema = buildFederatedSchema({
      typeDefs: gql(printSchema(autoGeneratedSchema)),
      resolvers: this.getResolvers(options.resolvers),
    });

    executableSchema = this.overrideOrExtendResolvers(
      executableSchema,
      autoGeneratedSchema,
    );

    const schema = options.schema
      ? mergeSchemas({
          schemas: [options.schema, executableSchema],
        })
      : executableSchema;
    return schema;
  }

  private getResolvers(optionResolvers: any) {
    optionResolvers = Array.isArray(optionResolvers)
      ? optionResolvers
      : [optionResolvers];
    return this.extendResolvers([
      this.resolversExplorerService.explore(),
      ...this.scalarsExplorerService.explore(),
      ...optionResolvers,
    ]);
  }

  private extendResolvers(resolvers: any[]) {
    return resolvers.reduce((prev, curr) => extend(prev, curr), {});
  }

  private overrideOrExtendResolvers(
    executableSchema: GraphQLSchema,
    autoGeneratedSchema: GraphQLSchema,
  ): GraphQLSchema {
    return transformSchema(executableSchema, (type) => {
      if (isUnionType(type) && type.name !== '_Entity') {
        const autogeneratedUnionType = autoGeneratedSchema.getType(
          type.name,
        ) as GraphQLUnionType;
        type.resolveType = async (
          value: any,
          context: any,
          info: GraphQLResolveInfo,
          abstractType: GraphQLAbstractType,
        ) => {
          const result = await autogeneratedUnionType.resolveType(
            value,
            context,
            info,
            abstractType,
          );
          if (isString(result)) {
            return result;
          }
          // for some reason this doesnt work if we return the resolved
          // type object, but does if we return just the name
          return result.name;
        };
      } else if (isEnumType(type)) {
        return autoGeneratedSchema.getType(type.name);
      } else if (isInterfaceType(type)) {
        return autoGeneratedSchema.getType(type.name);
      } else if (isInputObjectType(type)) {
        const autoGeneratedInputType = autoGeneratedSchema.getType(
          type.name,
        ) as GraphQLInputObjectType;

        if (!autoGeneratedInputType) {
          return type;
        }
        const fields = type.getFields();
        forEach(
          fields,
          (value: GraphQLField<unknown, unknown>, key: string) => {
            const field = autoGeneratedInputType.getFields()[key];
            if (!field) {
              return;
            }
            value.extensions = field.extensions;
          },
        );
        type.extensions = autoGeneratedInputType.extensions;
        return type;
      } else if (isObjectType(type)) {
        const autoGeneratedObjectType = autoGeneratedSchema.getType(
          type.name,
        ) as GraphQLObjectType;

        if (!autoGeneratedObjectType) {
          return type;
        }
        const fields = type.getFields();
        forEach(
          fields,
          (value: GraphQLField<unknown, unknown>, key: string) => {
            const field = autoGeneratedObjectType.getFields()[key];
            if (!field) {
              return;
            }
            value.extensions = field.extensions;
            value.astNode = field.astNode;

            if (!value.resolve) {
              value.resolve = field.resolve;
            }
          },
        );
        type.extensions = autoGeneratedObjectType.extensions;
        return type;
      }
      return type;
    });
  }
}
